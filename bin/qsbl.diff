*** qsblast.pl	2017-03-28 23:51:03.000000000 -0400
--- ../../bigplant_v3/bin/qsblast.pl	2017-02-03 03:54:07.000000000 -0500
***************
*** 10,16 ****
  my $NCPU;   # cpu's to give blast
  my $gb;   #gb to run blast
  my $MYUSER;
- my $myjob;
  BEGIN {
  	$OID_HOME=$ENV{'OID_HOME'};
  	die "Environment variable OID_HOME is not defined ... exiting.\n" if ! defined($OID_HOME);
--- 10,15 ----
***************
*** 25,117 ****
  use OrthologID; 
  use Getopt::Long;
  use strict;
- our $HPC;
- sub fmthpc{
-     (my $gb, my $wall,  my $cpus, my $tasks, my $script, my @args) = @_;
-     if  ($HPC =~ /S/){
-         my $PARAMS = "-n $tasks -c $cpus -t $wall --mem $gb ";
-         my $argstr = '';
-         foreach my $arg(@args){
-             $argstr .= " $arg";
-         }
-         my $submit = q/sbatch /."$PARAMS $script $argstr";
-         return $submit;
-     } else {   #HPC = 'P' or undefined
-        my $walmem = "mem=$gb".",walltime="."$wall";
-        my $PARAMS = "-l nodes=1:ppn=$NCPU -l $walmem";
-        my $argstr = "";
-        if (@args >0){
-             $argstr = "-v";
-             my $argnum = 0;
-             foreach my $arg (@args){
-               $argnum++;
-               $argstr .= " arg$argnum"." $arg"; 
-           }
-         }   
-         my $submit =  q/qsub  /."$PARAMS $script $argstr";
-         return ($submit);
-     }
- }
- sub getqids {
-     my $rqs = shift;
-     my $flg = 1;
-     my @stuff = ();
-     my $qs;
- 
-     if  ($HPC =~ /S/){
-         my $pid = open(QS,"squeue -l -u $MYUSER |");
-         my $jnk = <QS>;
-         $jnk = <QS>;
-         while (<QS>){
-             chomp;
-             @stuff = split;
-             if ($flg) {
- #                print " squeue " ,join " ",@stuff;
-                 print "squeue ",scalar(@stuff);
- #                print "\nX$stuff[0]X\n";
- #                $flg = 0;
-             }
-             next if ($stuff[0] =~ /\D/);
-             $qs = "$stuff[0]";
-             $$rqs{"$qs"} = 1; #mark active
-             print "$qs and $$rqs{$qs}\n";
-         }
- 
-         return;
-     } else {
- 
-         my $pid = open(QS,"qstat -e -u $MYUSER |");
-         my $jnk = <QS>;
-         $jnk = <QS>;
- #    print "testqs $jnk\n";
-         while (<QS>){
-             chomp;
-             @stuff = split;
-             next if ($stuff[0] =~ /\D/);
-             if ($stuff[-2] =~ /R|Q/){
-                 $qs = "$stuff[0]";
-                 $$rqs{"$qs"} = 1; #mark active
-             }
-         }
-     }
- }
-         
- 
- 
- 
  
  sub startqs { #starts a qsub
  #                startqs(\@qsid,$blid,$wall);
      (my $rqs, ,my $blid, my $wall) = @_;
      my $JOB_SCRIPT="$OID_USER_DIR/run_oid_job.sh";
  
! #    my $submit = q/qsub  /."$PARAMS $JOB_SCRIPT".q/ -v arg1="-b"/.",arg2=$blid  2>/dev/null";
!     my $nt = 1;
!     my @args = ();
!     push @args,"-b";
!     push @args,$blid;
!     my $submit = fmthpc($gb,$wall,$NCPU,$nt,$JOB_SCRIPT,@args);
!     $submit .= " 2>/dev/null";
      print "$submit\n";
  #    my $pid = open(QS,"qsub -l $PARAMS $JOB_SCRIPT -v arg1=/"$at/",arg2=/"^$fam.$dol/" 2>/dev/null |");
      my $pid = open(QS,"$submit |");
--- 24,39 ----
  use OrthologID; 
  use Getopt::Long;
  use strict;
  
  sub startqs { #starts a qsub
  #                startqs(\@qsid,$blid,$wall);
      (my $rqs, ,my $blid, my $wall) = @_;
      my $JOB_SCRIPT="$OID_USER_DIR/run_oid_job.sh";
  
!     my $walmem = "mem=$gb".",walltime="."$wall";
!     my $PARAMS = "-l nodes=1:ppn=$NCPU -l $walmem";
! #    my $PARAMS = "-l nodes=1:ppn=$NCPU -l mem=8GB,walltime=12:00:00";
!     my $submit = q/qsub  /."$PARAMS $JOB_SCRIPT".q/ -v arg1="-b"/.",arg2=$blid  2>/dev/null";
      print "$submit\n";
  #    my $pid = open(QS,"qsub -l $PARAMS $JOB_SCRIPT -v arg1=/"$at/",arg2=/"^$fam.$dol/" 2>/dev/null |");
      my $pid = open(QS,"$submit |");
***************
*** 120,134 ****
      if ($qs){
          chomp $qs;
          print "start qsid $qs for blastid $blid\n";
-         if ($qs !~ /^\d+$/){
-             my @stf = split /\s/,$qs;
-             if ($stf[-1] =~ /^\d+$/){
-                 $qs = $stf[-1];
-             } else {
-                 print "truble breaking up $qs\n";
-             }
-         }
- 
          $$rqs{$qs} = [$blid,$t,$wall]; #put $qs in its place
          return 1;
      } else {
--- 42,47 ----
***************
*** 147,164 ****
      my %actfam = ();
      my $strt;
      my $wall;
      my $fndme = 0;
      my $flag = 1;
      $fndme = 1 if (! $myjob);   #non pbs system
      my $t = localtime;
  #    print "testqs called @$rqs\n";
  	$| = 1;    # flush STDOUT
-     getqids(\%active);
-     if ($myjob){
-         $fndme = 1 if exists $active{"$myjob"};
-     }
-         return ($fndme,%actfam) if ($fndme);
- 
  #    print "enter testqs as $MYUSER\n";
      while ($flag) {
          $flag = 0;
--- 60,72 ----
      my %actfam = ();
      my $strt;
      my $wall;
+     my $myjob = $ENV{"PBS_JOBID"};
      my $fndme = 0;
      my $flag = 1;
      $fndme = 1 if (! $myjob);   #non pbs system
      my $t = localtime;
  #    print "testqs called @$rqs\n";
  	$| = 1;    # flush STDOUT
  #    print "enter testqs as $MYUSER\n";
      while ($flag) {
          $flag = 0;
***************
*** 225,241 ****
      my %active = ();
      my @stuff = ();
      my $qs;
      my $fndme = 0;
      $fndme = 1 if (! $myjob);   #non pbs system
      
  #    print "testqs called @$rqs\n";
  	$| = 1;    # flush STDOUT
-     getqids(\%active);
- #    my @kq = keys %active;
- #    print "keys active ",join ",",@kq,"\n";
  #    print "enter testqs as $MYUSER\n";
!     if ($myjob){
!         $fndme = 1 if exists $active{"$myjob"};
      }
      if (! $fndme) {
          print "did not find me job $myjob - something wrong - try later\n";
--- 133,160 ----
      my %active = ();
      my @stuff = ();
      my $qs;
+     my $myjob = $ENV{"PBS_JOBID"};
      my $fndme = 0;
      $fndme = 1 if (! $myjob);   #non pbs system
      
  #    print "testqs called @$rqs\n";
  	$| = 1;    # flush STDOUT
  #    print "enter testqs as $MYUSER\n";
!     my $pid = open(QS,"qstat -e -u $MYUSER |");
!     my $jnk = <QS>;
!     $jnk = <QS>;
! #    print "testqs $jnk\n";
!     while (<QS>){
!         chomp;
!         @stuff = split;
!         next if ($stuff[0] =~ /\D/);
! #        print "qs $stuff[0], $stuff[-2]\n";
!         if ($stuff[-2] =~ /R|Q/){
!             $qs = "$stuff[0]";
!             $fndme = 1 if ($qs == $myjob);
!             $active{"$qs"} = 1;  #put found pids in hash
! #            print "$stuff[0] is active\n";
!         }
      }
      if (! $fndme) {
          print "did not find me job $myjob - something wrong - try later\n";
***************
*** 245,257 ****
  #        print "test active $qs\n";
          next if ($qs =~ /D/);
  #        print "$qs is still active\n" if exists $active{"$qs"};
!         next if exists $active{$qs};
! #        foreach my $x (%active){
! #            print "$x not number\n " if ($x =~/D/);
! #            print "$x and $active{$x}\n";
! #            print "$qs is a keys\n " if ($qs == $x);
! #        }
!         print "really keys active ",join ":",keys %active,"\n";
          my @blinfo = @{$$rqs{$qs}};
  
          print "$qs  blast $blinfo[0] not active\n" if ! exists $active{$qs};
--- 164,170 ----
  #        print "test active $qs\n";
          next if ($qs =~ /D/);
  #        print "$qs is still active\n" if exists $active{"$qs"};
!         next if exists $active{"$qs"};
          my @blinfo = @{$$rqs{$qs}};
  
          print "$qs  blast $blinfo[0] not active\n" if ! exists $active{$qs};
***************
*** 265,281 ****
  my $strtm = localtime; ## for restart
  my $qsubed;
  print "local time $t\n";
- $HPC = $OrthologID::HPC; #env nogood
- print "we are in hpc $HPC\n";
- if ($HPC =~ /S/){
-     $myjob = $ENV{"SLURM_JOB_ID"};
-     print "my job $myjob\n";
- }else {
-     $myjob = $ENV{"PBS_JOBID"};
-     print "my job $myjob\n";
- }
- 
- 
  ##our ($opt_g, $opt_w, $opt_p);
  my %param = ( 'g' => 16,'w' =>24, 'q' => 20, 'n' => 10);
  my $help='';
--- 178,183 ----
